{"version":3,"sources":["../../src/kite/base.js"],"names":["BaseKite","constructor","options","url","id","v4","Object","assign","defaultOptions","prefix","logger","name","level","logLevel","expireTokenOnExpiry","readyState","NOTREADY","setApi","auth","methods","api","connection","autoConnect","autoReconnect","CLOSED","Error","addConnectionHandlers","ws","OPEN","onOpen","initBackoff","connect","proto","messageScrubber","kite","on","request","req","message","JSON","stringify","ready","send","debug","getToken","key","setToken","token","emit","tokenSet","canConnect","CONNECTING","READY","includes","canReconnect","transportClass","Konstructor","transportOptions","info","addEventListener","open","bound","close","error","cleanTimerHandlers","handle","clear","disconnect","reconnect","notice","clearBackoffTimeout","onClose","event","dcInfo","process","nextTick","setBackoffTimeout","onMessage","data","call","onError","err","getKiteInfo","username","environment","version","region","hostname","KiteInfo","tell","method","params","callback","scrubbed","scrub","type","claimsA","split","claims","parse","exp","undefined","expMs","nowMs","earlyMs","renewMs","expiryHandle","expireToken","once","newToken","tokenExpired","ping","kites","random","Math","floor","length","DebugLevel","transport","SockJS","WebSocket","prototype"],"mappings":"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","file":"base.js","sourcesContent":["import dnode from 'dnode-protocol'\nimport atob from 'atob'\nimport uuid from 'uuid'\nimport Emitter from './emitter'\nimport now from './now'\nimport backoff from './backoff'\nimport handleIncomingMessage from './handleIncomingMessage'\nimport Timeout from './timeout'\nimport KiteError from './error'\nimport MessageScrubber from './messagescrubber'\nimport {\n  Event,\n  AuthType,\n  Defaults,\n  DebugLevel,\n  TimerHandles,\n  State,\n} from '../constants'\n\nimport WebSocket from 'ws'\nimport SockJS from 'sockjs-client'\n\nimport KiteApi from '../kiteapi'\nimport KiteLogger from '../kitelogger'\n\nclass BaseKite extends Emitter {\n  static version = Defaults.KiteInfo.version\n  static Error = KiteError\n  static DebugLevel = DebugLevel\n  static transport = {\n    SockJS,\n    WebSocket,\n  }\n  static transportClass = BaseKite.transport.WebSocket\n\n  static defaultOptions = {\n    autoConnect: true,\n    autoReconnect: true,\n    prefix: '',\n    transportClass: BaseKite.transportClass,\n    transportOptions: {},\n  }\n\n  constructor(options = {}) {\n    options = typeof options === 'string' ? { url: options } : options\n    super()\n\n    this.id = uuid.v4()\n    this.options = Object.assign({}, BaseKite.defaultOptions, options)\n\n    if (this.options.url && this.options.prefix) {\n      this.options.url += this.options.prefix\n    }\n\n    this.logger = new KiteLogger({\n      name: this.options.name || 'kite',\n      level: this.options.logLevel,\n    })\n\n    // refresh expired tokens\n    this.expireTokenOnExpiry()\n\n    this.readyState = State.NOTREADY\n\n    this.setApi(\n      new KiteApi(this, {\n        // to be backwards compatible we don't allow client apis to be\n        // authenticated.\n        auth: false,\n        methods: this.options.api,\n      })\n    )\n\n    const { connection, autoConnect, autoReconnect } = this.options\n\n    // if we have a connection already dismiss the `autoConnect` and\n    // `autoReconnect` options.\n    if (connection) {\n      if (connection.readyState === connection.CLOSED) {\n        throw new Error(\n          'Given connection is closed, try with a live connection or pass a url option to let Kite create the connection'\n        )\n      }\n\n      this.addConnectionHandlers(connection)\n      this.ws = connection\n\n      // if the connection is already open trigger `onOpen`.\n      if (connection.readyState === connection.OPEN) {\n        this.onOpen()\n      }\n    } else {\n      autoReconnect && this.initBackoff()\n      autoConnect && this.connect()\n    }\n  }\n\n  setApi(api) {\n    if (api instanceof KiteApi) {\n      this.api = api\n\n      this.proto = dnode(this.api.methods)\n      this.messageScrubber = new MessageScrubber({ kite: this })\n\n      this.proto.on(Event.request, req => {\n        const message = JSON.stringify(req)\n        this.ready(() => this.ws.send(message))\n        this.logger.debug('Sending:', message)\n      })\n    } else {\n      throw new Error('A valid KiteApi instance is required!')\n    }\n  }\n\n  getToken() {\n    return this.options.auth.key\n  }\n\n  setToken(token) {\n    // FIXME: this setter is not symettrical with the getter\n    const { auth } = this.options\n\n    if (auth && auth === AuthType.token) {\n      throw new Error('Invalid auth type!')\n    }\n\n    if (!auth) {\n      throw new Error('Auth option must be set before setting a token')\n    }\n\n    auth.key = token\n    return this.emit(Event.tokenSet, token)\n  }\n\n  canConnect() {\n    return ![State.CONNECTING, State.READY].includes(this.readyState)\n  }\n\n  canReconnect() {\n    // we don't want to reconnect if a connection is passed already.\n    return !this.options.connection && this.options.autoReconnect\n  }\n\n  connect() {\n    if (!this.canConnect()) {\n      return\n    }\n    this.readyState = State.CONNECTING\n    const { url, transportClass: Konstructor, transportOptions } = this.options\n\n    // websocket will whine if extra arguments are passed\n    this.ws =\n      Konstructor === WebSocket\n        ? new Konstructor(url)\n        : new Konstructor(url, null, transportOptions)\n\n    this.addConnectionHandlers(this.ws)\n\n    this.logger.info(`Trying to connect to ${url}`)\n  }\n\n  addConnectionHandlers(connection) {\n    connection.addEventListener(Event.open, this.bound('onOpen'))\n    connection.addEventListener(Event.close, this.bound('onClose'))\n    connection.addEventListener(Event.message, this.bound('onMessage'))\n    connection.addEventListener(Event.error, this.bound('onError'))\n    connection.addEventListener(Event.info, info => this.logger.info(info))\n  }\n\n  cleanTimerHandlers() {\n    for (let handle of TimerHandles) {\n      if (this[handle] != null) {\n        this[handle].clear()\n        this[handle] = null\n      }\n    }\n  }\n\n  disconnect(reconnect = false) {\n    this.cleanTimerHandlers()\n    this.options.autoReconnect = !!reconnect\n    if (this.ws != null) {\n      this.ws.close()\n    }\n    this.logger.notice(`Disconnecting from ${this.options.url}`)\n  }\n\n  onOpen() {\n    this.readyState = State.READY\n\n    this.logger.notice(`Connected to Kite: ${this.options.url}`)\n\n    // FIXME: the following is ridiculous.\n    if (typeof this.clearBackoffTimeout === 'function') {\n      this.clearBackoffTimeout()\n    }\n\n    this.emit(Event.open)\n  }\n\n  onClose(event) {\n    this.readyState = State.CLOSED\n    this.emit(Event.close, event)\n\n    let dcInfo = `${this.options.url}: disconnected`\n    // enable below to autoReconnect when the socket has been closed\n    if (this.canReconnect()) {\n      process.nextTick(() => this.setBackoffTimeout(this.bound('connect')))\n      dcInfo += ', trying to reconnect...'\n    }\n\n    this.logger.info(dcInfo)\n  }\n\n  onMessage({ data }) {\n    handleIncomingMessage.call(this, this.proto, data)\n  }\n\n  onError(err) {\n    this.emit(Event.error, 'Websocket error!', err)\n    this.logger.error('WebSocket error!', err)\n  }\n\n  getKiteInfo() {\n    const {\n      name,\n      username,\n      environment,\n      version,\n      region,\n      hostname,\n    } = this.options\n\n    return {\n      id: this.id,\n      username: username || Defaults.KiteInfo.username,\n      environment: environment || Defaults.KiteInfo.environment,\n      name: name || Defaults.KiteInfo.name,\n      version: version || Defaults.KiteInfo.version,\n      region: region || Defaults.KiteInfo.region,\n      hostname: hostname || Defaults.KiteInfo.hostname,\n    }\n  }\n\n  tell(method, params, callback) {\n    const scrubbed = this.messageScrubber.scrub(method, params, callback)\n    this.proto.emit(Event.request, scrubbed)\n  }\n\n  expireTokenOnExpiry() {\n    const { auth = {} } = this.options\n    if (auth.type !== AuthType.token) return\n\n    const { auth: { key: token } } = this.options\n\n    const claimsA = token.split('.')[1]\n\n    const claims = (() => {\n      try {\n        return JSON.parse(atob(claimsA))\n      } catch (error) {}\n    })()\n\n    if (claims != null ? claims.exp : undefined) {\n      // the `exp` is measured in seconds since the UNIX epoch; convert to ms\n      const expMs = claims.exp * 1000\n      const nowMs = +now()\n      // renew token before it expires:\n      const earlyMs = 5 * 60 * 1000 // 5 min\n      const renewMs = expMs - nowMs - earlyMs\n      this.expiryHandle = new Timeout(this.bound('expireToken'), renewMs)\n    }\n  }\n\n  expireToken(callback) {\n    if (callback != null) {\n      this.once(Event.tokenSet, newToken => callback(null, newToken))\n    }\n    this.emit(Event.tokenExpired)\n    if (this.expiryHandle) {\n      this.expiryHandle.clear()\n      this.expiryHandle = null\n    }\n  }\n\n  ready(callback) {\n    if (this.readyState === State.READY) {\n      process.nextTick(callback)\n    } else {\n      this.once(Event.open, callback)\n    }\n  }\n\n  ping(callback) {\n    return this.tell('kite.ping', callback)\n  }\n\n  static disconnect(...kites) {\n    for (let kite of kites) {\n      kite.disconnect()\n    }\n  }\n\n  static random(kites) {\n    return kites[Math.floor(Math.random() * kites.length)]\n  }\n}\n\nBaseKite.prototype.initBackoff = backoff\n\nexport default BaseKite\n"]}